// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class MaBridge {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MaBridge(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MaBridge.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<mab_bool> _mab_true = _lookup<mab_bool>('mab_true');

  int get mab_true => _mab_true.value;

  set mab_true(int value) => _mab_true.value = value;

  late final ffi.Pointer<mab_bool> _mab_false = _lookup<mab_bool>('mab_false');

  int get mab_false => _mab_false.value;

  set mab_false(int value) => _mab_false.value = value;

  mab_device_config mab_device_config_init(
    int type,
    int sampleRate,
    int channels,
    int bufferFrameSize,
  ) {
    return _mab_device_config_init(
      type,
      sampleRate,
      channels,
      bufferFrameSize,
    );
  }

  late final _mab_device_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_device_config Function(
              ffi.Int32, ffi.Int, ffi.Int, ffi.Int)>>('mab_device_config_init');
  late final _mab_device_config_init = _mab_device_config_initPtr
      .asFunction<mab_device_config Function(int, int, int, int)>();

  int mab_device_init(
    ffi.Pointer<mab_device> pDevice,
    mab_device_config config,
    ffi.Pointer<ffi.Int32> pBackends,
    int backendCount,
  ) {
    return _mab_device_init(
      pDevice,
      config,
      pBackends,
      backendCount,
    );
  }

  late final _mab_device_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mab_device>, mab_device_config,
              ffi.Pointer<ffi.Int32>, ffi.Int)>>('mab_device_init');
  late final _mab_device_init = _mab_device_initPtr.asFunction<
      int Function(ffi.Pointer<mab_device>, mab_device_config,
          ffi.Pointer<ffi.Int32>, int)>();

  int mab_device_capture_read(
    ffi.Pointer<mab_device> pDevice,
    ffi.Pointer<ffi.Float> pBuffer,
    int frameCount,
    ffi.Pointer<ffi.Int> pFramesRead,
  ) {
    return _mab_device_capture_read(
      pDevice,
      pBuffer,
      frameCount,
      pFramesRead,
    );
  }

  late final _mab_device_capture_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('mab_device_capture_read');
  late final _mab_device_capture_read = _mab_device_capture_readPtr.asFunction<
      int Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Int>)>();

  int mab_device_playback_write(
    ffi.Pointer<mab_device> pDevice,
    ffi.Pointer<ffi.Float> pBuffer,
    int frameCount,
  ) {
    return _mab_device_playback_write(
      pDevice,
      pBuffer,
      frameCount,
    );
  }

  late final _mab_device_playback_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>,
              ffi.Int)>>('mab_device_playback_write');
  late final _mab_device_playback_write =
      _mab_device_playback_writePtr.asFunction<
          int Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>, int)>();

  int mab_device_start(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_start(
      pDevice,
    );
  }

  late final _mab_device_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_device>)>>(
          'mab_device_start');
  late final _mab_device_start =
      _mab_device_startPtr.asFunction<int Function(ffi.Pointer<mab_device>)>();

  int mab_device_stop(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_stop(
      pDevice,
    );
  }

  late final _mab_device_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_device>)>>(
          'mab_device_stop');
  late final _mab_device_stop =
      _mab_device_stopPtr.asFunction<int Function(ffi.Pointer<mab_device>)>();

  int mab_device_available_read(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_available_read(
      pDevice,
    );
  }

  late final _mab_device_available_readPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_device>)>>(
          'mab_device_available_read');
  late final _mab_device_available_read = _mab_device_available_readPtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>();

  int mab_device_available_write(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_available_write(
      pDevice,
    );
  }

  late final _mab_device_available_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_device>)>>(
          'mab_device_available_write');
  late final _mab_device_available_write = _mab_device_available_writePtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>();

  int mab_device_uninit(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_uninit(
      pDevice,
    );
  }

  late final _mab_device_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_device>)>>(
          'mab_device_uninit');
  late final _mab_device_uninit =
      _mab_device_uninitPtr.asFunction<int Function(ffi.Pointer<mab_device>)>();

  mab_audio_decoder_config mab_audio_decoder_config_init(
    int sampleRate,
    int channels,
  ) {
    return _mab_audio_decoder_config_init(
      sampleRate,
      channels,
    );
  }

  late final _mab_audio_decoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_audio_decoder_config Function(
              ffi.Int, ffi.Int)>>('mab_audio_decoder_config_init');
  late final _mab_audio_decoder_config_init = _mab_audio_decoder_config_initPtr
      .asFunction<mab_audio_decoder_config Function(int, int)>();

  int mab_audio_decoder_get_format(
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<mab_audio_decoder_format> pFormat,
  ) {
    return _mab_audio_decoder_get_format(
      pFilePath,
      pFormat,
    );
  }

  late final _mab_audio_decoder_get_formatPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>,
                  ffi.Pointer<mab_audio_decoder_format>)>>(
      'mab_audio_decoder_get_format');
  late final _mab_audio_decoder_get_format =
      _mab_audio_decoder_get_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<mab_audio_decoder_format>)>();

  int mab_audio_decoder_init_file(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<ffi.Char> pFilePath,
    mab_audio_decoder_config config,
  ) {
    return _mab_audio_decoder_init_file(
      pDecoder,
      pFilePath,
      config,
    );
  }

  late final _mab_audio_decoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<ffi.Char>,
              mab_audio_decoder_config)>>('mab_audio_decoder_init_file');
  late final _mab_audio_decoder_init_file =
      _mab_audio_decoder_init_filePtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<ffi.Char>,
              mab_audio_decoder_config)>();

  int mab_audio_decoder_decode(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<ffi.Float> pOutput,
    int frameCount,
    ffi.Pointer<uint64> pFramesRead,
  ) {
    return _mab_audio_decoder_decode(
      pDecoder,
      pOutput,
      frameCount,
      pFramesRead,
    );
  }

  late final _mab_audio_decoder_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<ffi.Float>,
              uint64,
              ffi.Pointer<uint64>)>>('mab_audio_decoder_decode');
  late final _mab_audio_decoder_decode =
      _mab_audio_decoder_decodePtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<ffi.Float>,
              int, ffi.Pointer<uint64>)>();

  int mab_audio_decoder_get_cursor(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<uint64> pCursor,
  ) {
    return _mab_audio_decoder_get_cursor(
      pDecoder,
      pCursor,
    );
  }

  late final _mab_audio_decoder_get_cursorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<uint64>)>>('mab_audio_decoder_get_cursor');
  late final _mab_audio_decoder_get_cursor =
      _mab_audio_decoder_get_cursorPtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<uint64>)>();

  int mab_audio_decoder_set_cursor(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    int cursor,
  ) {
    return _mab_audio_decoder_set_cursor(
      pDecoder,
      cursor,
    );
  }

  late final _mab_audio_decoder_set_cursorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mab_audio_decoder>,
              uint64)>>('mab_audio_decoder_set_cursor');
  late final _mab_audio_decoder_set_cursor = _mab_audio_decoder_set_cursorPtr
      .asFunction<int Function(ffi.Pointer<mab_audio_decoder>, int)>();

  int mab_audio_decoder_get_length(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<uint64> pLength,
  ) {
    return _mab_audio_decoder_get_length(
      pDecoder,
      pLength,
    );
  }

  late final _mab_audio_decoder_get_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<uint64>)>>('mab_audio_decoder_get_length');
  late final _mab_audio_decoder_get_length =
      _mab_audio_decoder_get_lengthPtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<uint64>)>();

  int mab_audio_decoder_uninit(
    ffi.Pointer<mab_audio_decoder> pDecoder,
  ) {
    return _mab_audio_decoder_uninit(
      pDecoder,
    );
  }

  late final _mab_audio_decoder_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_audio_decoder>)>>(
      'mab_audio_decoder_uninit');
  late final _mab_audio_decoder_uninit = _mab_audio_decoder_uninitPtr
      .asFunction<int Function(ffi.Pointer<mab_audio_decoder>)>();
}

abstract class mab_backend {
  static const int mab_backend_wasapi = 0;
  static const int mab_backend_dsound = 1;
  static const int mab_backend_winmm = 2;
  static const int mab_backend_coreaudio = 3;
  static const int mab_backend_sndio = 4;
  static const int mab_backend_audio4 = 5;
  static const int mab_backend_oss = 6;
  static const int mab_backend_pulseaudio = 7;
  static const int mab_backend_alsa = 8;
  static const int mab_backend_jack = 9;
  static const int mab_backend_aaudio = 10;
  static const int mab_backend_opensl = 11;
  static const int mab_backend_webaudio = 12;
}

abstract class mab_dither_mode {
  static const int mab_dither_mode_none = 0;
  static const int mab_dither_mode_rectangle = 1;
  static const int mab_dither_mode_triangle = 2;
}

abstract class mab_channel_mix_mode {
  static const int mab_channel_mix_mode_rectangular = 0;
  static const int mab_channel_mix_mode_simple = 1;
}

abstract class mab_device_type {
  static const int mab_device_type_playback = 1;
  static const int mab_device_type_capture = 2;
}

typedef mab_bool = ffi.Int;

class mab_device_config extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int()
  external int bufferFrameSize;

  @mab_bool()
  external int noFixedSizedCallback;
}

class mab_device extends ffi.Struct {
  external mab_device_config config;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int32()
  external int backend;

  external ffi.Pointer<ffi.Void> pData;
}

class mab_audio_decoder_config extends ffi.Struct {
  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int32()
  external int ditherMode;

  @ffi.Int32()
  external int channelMixMode;
}

class mab_audio_decoder extends ffi.Struct {
  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  external ffi.Pointer<ffi.Void> pData;
}

class mab_audio_decoder_format extends ffi.Struct {
  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @uint64()
  external int length;
}

typedef uint64 = ffi.UnsignedLongLong;
